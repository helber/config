set shell=/bin/bash

" Fold method
" set foldmethod=indent
" set foldlevelstart=10

" Black
let g:black_linelength = 79

nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz


" Pytest
nmap <silent><Leader>tf <Esc>:Pytest file<CR>
nmap <silent><Leader>tc <Esc>:Pytest class<CR>
nmap <silent><Leader>tm <Esc>:Pytest method<CR>
nmap <silent><Leader>tp <Esc>:Pytest project<CR>

" vim-python
augroup vimrc-python
  autocmd!
  autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=8 colorcolumn=79
      \ formatoptions+=croq softtabstop=4 smartindent autoindent
      \ cinwords=if,elif,else,for,while,try,except,finally,def,class,with
augroup END

" Django
autocmd Filetype htmldjango setlocal ts=2 sw=2 expandtab
autocmd Filetype css setlocal ts=2 sw=2 expandtab
autocmd Filetype ruby setlocal ts=2 sw=2 expandtab
autocmd FileType htmldjango set commentstring={#\ %s\ #}

set cursorline

" session management
nnoremap <leader>so :OpenSession<Space>
nnoremap <leader>ss :SaveSession<Space>
nnoremap <leader>sd :DeleteSession<CR>
nnoremap <leader>sc :CloseSession<CR>

" let g:jedi#force_py_version = 2
if has("autocmd")
    filetype on
    " Spell
    set spelllang=pt_br,en_us
    let spell_language_list="brasileiro,american"
    let spell_auto_type="md,txt,gitcommit"
    au! BufNewFile,BufRead * let b:spell_language="brasileiro"
    autocmd FileType tex setlocal spell
    autocmd FileType gitcommit setlocal spell
    autocmd FileType txt setlocal spell
    " yaml
    autocmd FileType yaml setlocal nowrap ts=2 sts=2 sw=2 et
    " md
    autocmd FileType md setlocal ts=2 sts=2 sw=2 et spell
    " autocmd FileType make setlocal ts=8 sts=8 sw=8 et
    autocmd FileType javascript setlocal ts=4 sts=4 sw=4 et
    autocmd FileType html setlocal ts=4 sts=4 sw=4 et
endif

" let g:polyglot_disabled = ['python', 'ansible']
let g:polyglot_disabled = ['python']

let g:NERDTreeWinSize=30
" let g:NERDTreeMapOpenInTabSilent='<RightMouse>'
" let g:syntastic_python_flake8_post_args='--max-line-length=100 --ignore=W391,F403'

" let g:rehash256=1
" colorscheme molokai
set background=dark
" colorscheme burnttoast256
" colorscheme burnttoast256
colorscheme jellybeans
" colorscheme dracula
let g:airline_theme = 'dark'
if has("mouse_sgr")
    set ttymouse=sgr
else
    set ttymouse=xterm2
end
" set mouse=n
set mouse=a
set ttyfast
" set clipboard=unnamedplus
set clipboard^=unnamedplus
" set clipboard=unnamed
" set clipboard=autoselect

nmap <leader>l :set list!<CR>
if v:version >= 74
    set listchars=space:\.,tab:â–¸\ ,eol:â†µ,trail:Â·,extends:â†·,precedes:â†¶
else
    set listchars=tab:â–¸\ ,eol:â†µ,trail:Â·,extends:â†·,precedes:â†¶
endif
" Invisible character colors
"highlight NonText guifg=#4a4a59
"highlight SpecialKey guifg=#4a4a59

" session management
nnoremap <leader>so :OpenSession<Space>
nnoremap <leader>ss :SaveSession<Space>
nnoremap <leader>sd :DeleteSession<CR>
nnoremap <leader>sc :CloseSession<CR>

" delete without yanking
nnoremap <leader>d "_d
vnoremap <leader>d "_d

" replace currently selected text with default register
" without yanking it
vnoremap <leader>p "_dP
vnoremap p "_dP

" let mapleader="\<Space>"
" nnoremap <c-n> :lnext<CR>
" nnoremap <c-N> :lprevious<CR>

" GitGutter

noremap <Leader>gn :GitGutterNextHunk<CR>
noremap <Leader>gp :GitGutterPrevHunk<CR>


noremap <leader>c :BD<CR>
" nnoremap <F5> :buffers<CR>:buffer<Space>
" au FileType go nmap <leader>gd <Plug>(go-debug)


" Golang {{{
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
let g:go_list_type = "quickfix"
let g:go_fmt_command = "goimports"
let g:go_metalinter_autosave = 1

au FileType go nmap <leader>gr <Plug>(go-run)
au FileType go nmap <leader>gb <Plug>(go-build)
au FileType go nmap <leader>gt <Plug>(go-test)
" au FileType go nmap <leader>gc <Plug>(go-coverage)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gw <Plug>(go-doc-browser)
" " au FileType go nmap <Leader>gs <Plug>(go-implements)
" au FileType go nmap <Leader>gi <Plug>(go-info)
" au FileType go nmap <Leader>r <Plug>(go-rename)

" let g:go_highlight_functions = 1
" let g:go_highlight_methods = 1
" let g:go_highlight_fields = 1
" let g:go_highlight_types = 1
" let g:go_highlight_structs = 1
" let g:go_highlight_operators = 1
" let g:go_highlight_build_constraints = 1

" let g:go_test_timeout = '10s'

" let g:go_fmt_command = "goimports"

" let g:go_list_type = "quickfix"
" map <C-n> :cnext<CR>
" map <C-m> :cprevious<CR>
" nnoremap <leader>a :cclose<CR>

" run :GoBuild or :GoTestCompile based on the go file
" function! s:build_go_files()
"   let l:file = expand('%')
"   if l:file =~# '^\f\+_test\.go$'
"     call go#test#Test(0, 1)
"   elseif l:file =~# '^\f\+\.go$'
"     call go#cmd#Build(0)
"   endif
" endfunction
" autocmd FileType go nmap <leader>gb :<C-u>call <SID>build_go_files()<CR>

" au FileType go setlocal expandtab shiftwidth=4 tabstop=4 colorcolumn=99
"     \ softtabstop=4 smartindent autoindent

" deocomplete-go
" Path to python interpreter for neovim
let g:python3_host_prog  = '/usr/bin/python3'
" Skip the check of neovim module
let g:python3_host_skip_check = 1

" " Run deoplete.nvim automatically
" let g:deoplete#enable_at_startup = 1
" " deoplete-go settings
" let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
" let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
" let g:deoplete#sources#go#use_cache = 1

" deoplete tab-complete
" inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
" tern
" autocmd FileType go nnoremap <silent> <buffer> gb :TernDef<CR>

" }}}

" vim-move set to <C-k> and <C-j>
" let g:move_key_modifier = 'C'
" let g:move_map_keys = 0
" let g:move_key_modifier = 'M'
" set <F20>=j
" set <F21>=k
" vmap <F20> <Plug>MoveBlockDown
" vmap <F21> <Plug>MoveBlockUp
" nmap <F20> <Plug>MoveLineDown
" nmap <F21> <Plug>MoveLineUp


set relativenumber
set nowrap
" But do wrap on these types of files...
autocmd FileType markdown setlocal wrap ts=2 sts=2 sw=2 et
autocmd FileType html setlocal wrap


" noremap hh <esc>
" nnoremap ; :
" nnoremap : ;

noremap <up> :echoerr 'use k to up'<CR>
noremap <down> :echoerr 'use j to down'<CR>
noremap <left> :echoerr 'use h to left'<CR>
noremap <right> :echoerr 'use l to right'<CR>


" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" " position. Coc only does snippet and additional edit on confirm.
" " <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
" if exists('*complete_info')
"   inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
" else
"   inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" endif
" 
" " Use `[g` and `]g` to navigate diagnostics
" " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
" nmap <silent> [g <Plug>(coc-diagnostic-prev)
" nmap <silent> ]g <Plug>(coc-diagnostic-next)
" 
" " GoTo code navigation.
" nmap <silent> gd <Plug>(coc-definition)
" nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
" nmap <silent> gr <Plug>(coc-references)
" 
" " Use K to show documentation in preview window.
" nnoremap <silent> K :call <SID>show_documentation()<CR>
" 
" function! s:show_documentation()
"   if (index(['vim','help'], &filetype) >= 0)
"     execute 'h '.expand('<cword>')
"   else
"     call CocAction('doHover')
"   endif
" endfunction
" 
" " Highlight the symbol and its references when holding the cursor.
" autocmd CursorHold * silent call CocActionAsync('highlight')
" 
" " Symbol renaming.
" nmap <leader>rn <Plug>(coc-rename)
" 
" " Formatting selected code.
" xmap <leader>f  <Plug>(coc-format-selected)
" nmap <leader>f  <Plug>(coc-format-selected)
" 
" augroup mygroup
"   autocmd!
"   " Setup formatexpr specified filetype(s).
"   autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
"   " Update signature help on jump placeholder.
"   autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
" augroup end
" 
" " Applying codeAction to the selected region.
" " Example: `<leader>aap` for current paragraph
" xmap <leader>a  <Plug>(coc-codeaction-selected)
" nmap <leader>a  <Plug>(coc-codeaction-selected)
" 
" " Remap keys for applying codeAction to the current buffer.
" nmap <leader>ac  <Plug>(coc-codeaction)
" " Apply AutoFix to problem on the current line.
" nmap <leader>qf  <Plug>(coc-fix-current)
" 
" " Map function and class text objects
" " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
" xmap if <Plug>(coc-funcobj-i)
" omap if <Plug>(coc-funcobj-i)
" xmap af <Plug>(coc-funcobj-a)
" omap af <Plug>(coc-funcobj-a)
" xmap ic <Plug>(coc-classobj-i)
" omap ic <Plug>(coc-classobj-i)
" xmap ac <Plug>(coc-classobj-a)
" omap ac <Plug>(coc-classobj-a)
" 
" " Use CTRL-S for selections ranges.
" " Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
" nmap <silent> <C-s> <Plug>(coc-range-select)
" xmap <silent> <C-s> <Plug>(coc-range-select)
" 
" " Add `:Format` command to format current buffer.
" command! -nargs=0 Format :call CocAction('format')
" 
" " Add `:Fold` command to fold current buffer.
" command! -nargs=? Fold :call     CocAction('fold', <f-args>)
" 
" " Add `:OR` command for organize imports of the current buffer.
" command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
" 
" " Add (Neo)Vim's native statusline support.
" " NOTE: Please see `:h coc-status` for integrations with external plugins that
" " provide custom statusline: lightline.vim, vim-airline.
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
" 
" " Mappings for CoCList
" " Show all diagnostics.
" nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" " Manage extensions.
" nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" " Show commands.
" nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" " Find symbol of current document.
" nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" " Search workspace symbols.
" nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" " Do default action for next item.
" nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" " Do default action for previous item.
" nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" " Resume latest coc list.
" nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" inoremap <up> <ESC>:echoerr 'use k to up'<CR>
" inoremap <down> <ESC>:echoerr 'use j to down'<CR>
" inoremap <left> <ESC>:echoerr 'use h to left'<CR>
" inoremap <right> <ESC>:echoerr 'use l to right'<CR>
" inoremap <ESC> <Nop>
" expand('~/.vim/plugged')
if filereadable(expand("~/.vim/.vimrc.local.bundles"))
    source ~/.vim/.vimrc.local.bundles
endif
if filereadable(expand("~/.vim/.vimrc.common"))
    source ~/.vim/.vimrc.common
endif

" include vimrc project file
if filereadable(".vimrc.proj")
    source .vimrc.proj
endif

