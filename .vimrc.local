set shell=/bin/bash

set expandtab shiftwidth=4 tabstop=8 colorcolumn=79 softtabstop=4 smartindent

" vim-python
augroup vimrc-python
  autocmd!
  autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=8 colorcolumn=79
      \ formatoptions+=croq softtabstop=4 smartindent autoindent
      \ cinwords=if,elif,else,for,while,try,except,finally,def,class,with
augroup END

" Django
autocmd Filetype htmldjango setlocal ts=2 sw=2 expandtab
autocmd Filetype css setlocal ts=2 sw=2 expandtab
autocmd Filetype ruby setlocal ts=2 sw=2 expandtab
autocmd FileType htmldjango set commentstring={#\ %s\ #}
set cursorline

" let g:jedi#force_py_version = 2
if has("autocmd")
    filetype on
    " yaml
    autocmd FileType yaml setlocal ts=2 sts=2 sw=2 et
    " autocmd FileType make setlocal ts=8 sts=8 sw=8 et
    autocmd FileType javascript setlocal ts=4 sts=4 sw=4 et
    autocmd FileType html setlocal ts=4 sts=4 sw=4 et
endif

let g:NERDTreeWinSize=30
" let g:NERDTreeMapOpenInTabSilent='<RightMouse>'
" let g:syntastic_python_flake8_post_args='--max-line-length=100 --ignore=W391,F403'

" let g:rehash256=1
" colorscheme jellybeans
" colorscheme molokai
colorscheme burnttoast256
set background=dark
" colorscheme rdark-terminal
let g:airline_theme = 'dark'
if has("mouse_sgr")
    set ttymouse=sgr
else
    set ttymouse=xterm2
end
" set mouse=n
set mouse=a
set ttyfast
set clipboard=unnamedplus

nmap <leader>l :set list!<CR>
" set listchars=space:\.,tab:â–¸\ ,eol:â†µ,trail:Â·,extends:â†·,precedes:â†¶
if v:version >= 74
    set listchars=tab:â–¸\ ,eol:â†µ,trail:Â·,extends:â†·,precedes:â†¶
else
    set listchars=tab:â–¸\ ,eol:â†µ,trail:Â·,extends:â†·,precedes:â†¶
endif

" Invisible character colors
"highlight NonText guifg=#4a4a59
"highlight SpecialKey guifg=#4a4a59

" session management
nnoremap <leader>so :OpenSession<Space>
nnoremap <leader>ss :SaveSession<Space>
nnoremap <leader>sd :DeleteSession<CR>
nnoremap <leader>sc :CloseSession<CR>

" delete without yanking
nnoremap <leader>d "_d
vnoremap <leader>d "_d

" My custom ctrlp
" let g:ctRLP_Custom_ignore = '\v[\/](node_modules|target|dist|vendor)|(\.(swp|tox|ico|git|hg|svn))$'
" if executable('ag')
"     let g:ctrlp_user_command = 'ag %s -l --nocolor --ignore '+ g:ctrlp_custom_ignore +' -g ""'
" endif

" replace currently selected text with default register
" without yanking it
vnoremap <leader>p "_dP
vnoremap p "_dP

" let mapleader="\<Space>"
" nnoremap <c-n> :lnext<CR>
" nnoremap <c-N> :lprevious<CR>

" GitGutter

noremap <Leader>gn :GitGutterNextHunk<CR>
noremap <Leader>gp :GitGutterPrevHunk<CR>


noremap <leader>c :BD<CR>
nnoremap <F5> :buffers<CR>:buffer<Space>


" Golang {{{
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
let g:go_list_type = "quickfix"
let g:go_fmt_command = "goimports"
let g:go_metalinter_autosave = 1

au FileType go nmap <leader>gr <Plug>(go-run)
au FileType go nmap <leader>gb <Plug>(go-build)
au FileType go nmap <leader>gt <Plug>(go-test)
au FileType go nmap <leader>gc <Plug>(go-coverage)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gw <Plug>(go-doc-browser)
" au FileType go nmap <Leader>gs <Plug>(go-implements)
au FileType go nmap <Leader>gi <Plug>(go-info)
au FileType go nmap <Leader>r <Plug>(go-rename)

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

let g:go_test_timeout = '10s'

let g:go_fmt_command = "goimports"

" let g:go_list_type = "quickfix"

au FileType go setlocal expandtab shiftwidth=8 tabstop=8 colorcolumn=99
    \ softtabstop=8 smartindent autoindent

" deocomplete-go
" Path to python interpreter for neovim
let g:python3_host_prog  = '/usr/bin/python3'
" Skip the check of neovim module
let g:python3_host_skip_check = 1

" Run deoplete.nvim automatically
let g:deoplete#enable_at_startup = 1
" deoplete-go settings
let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
let g:deoplete#sources#go#use_cache = 1

" deoplete tab-complete
" inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
" tern
" autocmd FileType go nnoremap <silent> <buffer> gb :TernDef<CR>

" }}}

" vim-move set to <C-k> and <C-j>
" let g:move_key_modifier = 'C'
" let g:move_map_keys = 0
" let g:move_key_modifier = 'M'
" set <F20>=j
" set <F21>=k
" vmap <F20> <Plug>MoveBlockDown
" vmap <F21> <Plug>MoveBlockUp
" nmap <F20> <Plug>MoveLineDown
" nmap <F21> <Plug>MoveLineUp


set relativenumber
set nowrap
" But do wrap on these types of files...
autocmd FileType markdown setlocal wrap
autocmd FileType html setlocal wrap


" noremap hh <esc>
" nnoremap ; :
" nnoremap : ;

noremap <up> :echoerr 'use k to up'<CR>
noremap <down> :echoerr 'use j to down'<CR>
noremap <left> :echoerr 'use h to left'<CR>
noremap <right> :echoerr 'use l to right'<CR>

" inoremap <up> <ESC>:echoerr 'use k to up'<CR>
" inoremap <down> <ESC>:echoerr 'use j to down'<CR>
" inoremap <left> <ESC>:echoerr 'use h to left'<CR>
" inoremap <right> <ESC>:echoerr 'use l to right'<CR>
" inoremap <ESC> <Nop>

" include vimrc project file
if filereadable(".vimrc.proj")
    source .vimrc.proj
endif

